import ma_check
import sys,random,hashlib,time,requests


def open_dic(txt):
    get_list = list()
    with open(txt,'r') as txt_dict:
        lines = txt_dict.readlines()
    for line in lines:
        line = line.strip('\n')
        get_list.append(line)
    return get_list

def Former_11_words(dict_list,make11):
    
    '''
    generate the former 11 words. this is the spirit of this work!
    '''

    #print(make11)
    raw_words = []
    index_j = ''
    n=11
    while n>0:
      random_index = random.randint(0,2047)
      raw_words.append(dict_list[random_index])
      index_j += bin(random_index).replace('0b','').zfill(11)
      n = n-1
    return raw_words,index_j

def gen_words(n,dict_list,make11):
    
    '''
    param "n" is for the number of words to generate,here only for 12
    dict_list is the source of the 2048 words for generating.
    '''
    
    if n!=12:
      print("only 12 words is surpport atm")
      return false
    raw_words,index_j = Former_11_words(dict_list,make11)
    
    ### The last word's last 4 bits is the checksum generated by sha256 of former 128 bits
    
    rand_bits_F7 =bin(random.getrandbits(7)).replace('0b','').zfill(7)
    index_j += rand_bits_F7
    hash_str = hashlib.sha256(int('0b'+index_j,2).to_bytes(16,'big')).hexdigest()
    last_4bits = bin(int(hash_str[:1],16)).replace('0b','').zfill(4)
    last_index = int('0b'+rand_bits_F7+last_4bits,2)
    raw_words.append(dict_list[last_index])
    raw_words = " ".join(raw_words)
    
    return raw_words

def check(address):
    ###############################################
    address_str =",".join(address)
    try:
        apikey = 'YOUR-ETHERSCAN-API' #补充你的etherscan账号API-TOKEN
        #address = '你的以太坊地址'
        # 查询以太坊地址
        url1 = 'https://api.etherscan.io/api?module=account&action=balancemulti&address='+address_str+'&tag=latest&apikey='+apikey
        response1 = requests.get(url1)
        balances = response1.json()['result']
        for balance in balances:
            if float(balance['balance']) >0:
                print("The address:  " + balance['account'] + " is VALUED !T_T！")
                print("=====================GOD HELP US!!!!!!!!!!==============================")
                return balance
            else:
                print("The address:  "+balance['account']+ " is empty !T_T！")
                print("====================================================================")
        return False
    except Exception as order_err:
            print("查询出错，继续尝试", order_err)
            return False


def write_to_log(mnemonic_words,address,ban1):
    words_msg ="The mnemonic words are:  "+mnemonic_words+'\n'
    address_msg ="The address is:  " +address+'\n'
    balance_msg ="The balance is :  "+str(ban1)+' ETH\n'
    try:
        f = open("./log",'a')
        f.write(words_msg)
        f.write(address_msg)
        f.write(balance_msg)
        f.write("=================Success loged========================\n")
        f.close
    except Exception as file_err:
        print("write log err",file_err)
def fail_log():
    try:
        f = open("./log",'a')
        f.write("3")
        f.close
    except Exception as file_err2:
        print("write log err",file_err2)

def dig_work(mnemonic_words):
    address = []
    for mnemonic_word in mnemonic_words:
        address.append(ma_check.prv_to_addr(ma_check.to_private_key(mnemonic_word)))
    balance = check(address)
    if balance:
        value_word = mnemonic_words[address.index(balance['account'])]
        write_to_log(value_word,balance['account'],float(balance['balance'])/10e17)
        return True
    else:
        fail_log()
        return False
def FT_send_msg():
    api = "https://sc.ftqq.com/YOUR-API.send" #补充你的server酱API
    title = u"ch_work"
    content = """
    ##搞着了，快点上服务器查看！
    """
    data = {
        "text": title,
        "desp": content
    }
    req = requests.post(api, data=data)
    print(req)

if __name__ == '__main__':
    dict_list = open_dic('english.txt')
    #range(int(sys.argv[1]),int(sys.argv[2]))
    try:
        while 1:
             i=19
             words = []
             while i>0:
                 words.append(gen_words(12, dict_list,""))
                 i =i-1
             if dig_work(words):
                 FT_send_msg()
             time.sleep(12)
    except Exception as main_err:
        print("main loop error!",main_err)
    #test_addr =["0x4F26FfBe5F04ED43630fdC30A87638d53D0b0876"]
    #print(check(test_addr))
